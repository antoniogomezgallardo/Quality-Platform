version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: quality-platform-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-quality_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-quality_pass}
      POSTGRES_DB: ${DB_NAME:-quality_platform}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-quality_user} -d ${DB_NAME:-quality_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quality-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: quality-platform-cache
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quality-network

  # NestJS API
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
      args:
        - NODE_ENV=development
    container_name: quality-platform-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${API_PORT:-3000}
      DATABASE_URL: postgresql://${DB_USER:-quality_user}:${DB_PASSWORD:-quality_pass}@postgres:5432/${DB_NAME:-quality_platform}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    ports:
      - "${API_PORT:-3001}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/api:/app/apps/api:ro
      - ./libs:/app/libs:ro
      - ./prisma:/app/prisma:ro
      - api_node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - quality-network

  # Next.js Web Application
  web:
    build:
      context: .
      dockerfile: ./web/Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:${API_PORT:-3001}/api
    container_name: quality-platform-web
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${WEB_PORT:-4200}
      NEXT_PUBLIC_API_URL: http://localhost:${API_PORT:-3001}/api
    ports:
      - "${WEB_PORT:-4200}:4200"
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./web:/app/web:ro
      - ./libs:/app/libs:ro
      - web_node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - quality-network

  # Prisma Studio (Development Only)
  prisma-studio:
    image: node:20-alpine
    container_name: quality-platform-studio
    working_dir: /app
    command: sh -c "npm install -g pnpm && pnpm install && npx prisma studio"
    environment:
      DATABASE_URL: postgresql://${DB_USER:-quality_user}:${DB_PASSWORD:-quality_pass}@postgres:5432/${DB_NAME:-quality_platform}
    ports:
      - "${PRISMA_STUDIO_PORT:-5555}:5555"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./:/app:ro
      - studio_node_modules:/app/node_modules
    profiles:
      - development
    networks:
      - quality-network

  # pgAdmin (Development Only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: quality-platform-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@quality-platform.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - development
    networks:
      - quality-network

networks:
  quality-network:
    driver: bridge
    name: quality-platform-network

volumes:
  postgres_data:
    name: quality-platform-postgres
  redis_data:
    name: quality-platform-redis
  api_node_modules:
    name: quality-platform-api-modules
  web_node_modules:
    name: quality-platform-web-modules
  studio_node_modules:
    name: quality-platform-studio-modules
  pgadmin_data:
    name: quality-platform-pgadmin