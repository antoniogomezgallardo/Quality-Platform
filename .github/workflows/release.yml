name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: changelog
        run: |
          echo "# Changelog for ${{ steps.version.outputs.version }}" > RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

  # Build and Publish Docker Images
  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        service: [api, web]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_REGISTRY }}/quality-platform-${{ matrix.service }}
            ghcr.io/${{ github.repository }}-${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.service == 'api' && 'apps/api' || matrix.service }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.create-release.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # Generate Release Artifacts
  generate-artifacts:
    name: Generate Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Applications
        run: |
          pnpm nx build api --configuration=production
          pnpm nx build web --configuration=production

      - name: Create Distribution Archives
        run: |
          tar -czf quality-platform-api-${{ needs.create-release.outputs.version }}.tar.gz -C dist/apps api
          tar -czf quality-platform-web-${{ needs.create-release.outputs.version }}.tar.gz -C web .next public package.json

      - name: Upload API Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./quality-platform-api-${{ needs.create-release.outputs.version }}.tar.gz
          asset_name: quality-platform-api-${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Web Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./quality-platform-web-${{ needs.create-release.outputs.version }}.tar.gz
          asset_name: quality-platform-web-${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-publish, generate-artifacts]
    environment:
      name: production
      url: https://quality-platform.com
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name quality-platform-cluster --region ${{ secrets.AWS_REGION }}

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/api api=${{ secrets.DOCKER_REGISTRY }}/quality-platform-api:${{ needs.create-release.outputs.version }} -n production
          kubectl set image deployment/web web=${{ secrets.DOCKER_REGISTRY }}/quality-platform-web:${{ needs.create-release.outputs.version }} -n production
          kubectl rollout status deployment/api -n production
          kubectl rollout status deployment/web -n production

      - name: Verify Deployment
        run: |
          kubectl get pods -n production
          kubectl get services -n production

      - name: Run Smoke Tests
        run: |
          curl -f https://quality-platform.com/api/health || exit 1
          curl -f https://quality-platform.com || exit 1

      - name: Notify Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment successful for version ${{ needs.create-release.outputs.version }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Production deployment failed for version ${{ needs.create-release.outputs.version }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}