#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "${BLUE}üîç Pre-commit Quality Checks${NC}"

# Load project context for commit validation
echo "${BLUE}üß† Loading project context...${NC}"
node scripts/context-helper.js git > /tmp/git-context.json 2>/dev/null || echo "${YELLOW}‚ö†Ô∏è  Context loading failed${NC}"

# Prevent commits to protected branches
BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "develop" ]; then
  echo "${RED}‚ùå Direct commits to $BRANCH are not allowed!${NC}"
  echo "${YELLOW}üí° Please create a feature branch:${NC}"
  echo "   git checkout -b feature/your-feature-name"
  echo "   git checkout -b bugfix/your-bug-description"
  exit 1
fi

# Show current branch context
echo "${BLUE}üìã Current Branch: ${BRANCH}${NC}"

# Check if branch follows GitFlow naming convention
if [[ ! "$BRANCH" =~ ^(feature|bugfix|hotfix|release)/ ]]; then
  echo "${YELLOW}‚ö†Ô∏è  Branch name doesn't follow GitFlow convention${NC}"
  echo "${YELLOW}üí° Consider using: feature/*, bugfix/*, hotfix/*, or release/*${NC}"
fi

# Run linting and formatting
echo "${BLUE}üîß Running code quality checks...${NC}"

# Check if there are staged files
STAGED_FILES=$(git diff --cached --name-only)
if [ -z "$STAGED_FILES" ]; then
  echo "${YELLOW}‚ö†Ô∏è  No staged files found${NC}"
  exit 0
fi

# Run linting on staged files
echo "${BLUE}üîç Linting staged files...${NC}"
if command -v pnpm >/dev/null 2>&1; then
  # Run lint-staged if available, otherwise run basic lint
  if [ -f "package.json" ] && grep -q "lint-staged" package.json; then
    npx lint-staged
  else
    # Basic linting for TypeScript/JavaScript files
    for file in $STAGED_FILES; do
      if [[ "$file" =~ \.(ts|tsx|js|jsx)$ ]]; then
        echo "Checking: $file"
      fi
    done
  fi
fi

# Check for common issues in commit (excluding comments and this script)
HAS_CONSOLE_LOG=$(git diff --cached | grep -E "^\+.*console\.(log|debug|info)" | grep -v -E "(//|#|/\*|\*)" || true)
HAS_TODO_FIXME=$(git diff --cached | grep -E "^\+.*(TODO|FIXME|XXX|HACK)" | grep -v -E "(//|#|/\*|\*)" || true)
HAS_DEBUGGER=$(git diff --cached | grep -E "^\+.*debugger;" | grep -v -E "(//|#|/\*|\*)" || true)

if [ ! -z "$HAS_CONSOLE_LOG" ]; then
  echo "${YELLOW}‚ö†Ô∏è  Console statements detected in commit${NC}"
fi

if [ ! -z "$HAS_TODO_FIXME" ]; then
  echo "${YELLOW}‚ö†Ô∏è  TODO/FIXME comments detected in commit${NC}"
fi

if [ ! -z "$HAS_DEBUGGER" ]; then
  echo "${RED}‚ùå Debugger statements detected in commit${NC}"
  echo "${YELLOW}üí° Please remove debugger statements before committing${NC}"
  exit 1
fi

# Context-aware commit suggestions
MODIFIED_DIRS=$(git diff --cached --name-only | cut -d'/' -f1 | sort -u | tr '\n' ' ')
echo "${BLUE}üìÅ Modified areas: ${MODIFIED_DIRS}${NC}"

# Provide context-specific guidance
if echo "$MODIFIED_DIRS" | grep -q "api"; then
  echo "${BLUE}üí° API changes detected - consider updating:${NC}"
  echo "   ‚Ä¢ OpenAPI documentation (if endpoints changed)"
  echo "   ‚Ä¢ Database migrations (if schema changed)"
  echo "   ‚Ä¢ API tests (if business logic changed)"
fi

if echo "$MODIFIED_DIRS" | grep -q "web"; then
  echo "${BLUE}üí° Frontend changes detected - consider:${NC}"
  echo "   ‚Ä¢ Component tests (if UI logic changed)"
  echo "   ‚Ä¢ E2E tests (if user flows changed)"
  echo "   ‚Ä¢ Accessibility compliance"
fi

if echo "$MODIFIED_DIRS" | grep -q "tools"; then
  echo "${BLUE}üí° CLI tools changes detected - consider:${NC}"
  echo "   ‚Ä¢ README.md updates (if commands changed)"
  echo "   ‚Ä¢ CLI tests (if functionality changed)"
  echo "   ‚Ä¢ Help text updates"
fi

echo "${GREEN}‚úÖ Pre-commit checks completed${NC}"